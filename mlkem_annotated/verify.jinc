require "params.jinc"

/* 
__verify: compare two ciphertexts encoded as byte arrays of size MLKEM_INDCPA_CIPHERTEXTBYTES

requires:
  - valid(ctp,0,MLKEM_INDCPA_CIPHERTEXTBYTES)
ensures:
  - memory unchanged
  - res = if read_array(ctp,0,MLKEM_INDCPA_CIPHERTEXTBYTES) = ctpc 
          then 0 else 1 
*/

inline 
fn __verify(reg ui64 ctp, reg ptr u8[MLKEM_INDCPA_CIPHERTEXTBYTES] ctpc) -> reg u64
requires{is_mem_init((64u) ctp,MLKEM_INDCPA_CIPHERTEXTBYTES) && is_arr_init(ctpc,0,MLKEM_INDCPA_CIPHERTEXTBYTES)}
{
  reg u256 f g h;
  reg u64 cnd t64;
  reg u8 t1 t2;
  reg bool zf;
  inline int i off;

  cnd = 0;
  t64 = 1;
  h = #set0_256();

  for i=0 to MLKEM_INDCPA_CIPHERTEXTBYTES/32
  {
    f = ctpc.[u256 32*i];
    g = (u256)[(64u)(ctp + 32*i)];
    f = #VPXOR_256(f, g);
    h = #VPOR_256(h, f);
  }

  _, _, _, _, zf = #VPTEST_256(h, h);

  cnd = t64 if !zf;

  off = MLKEM_INDCPA_CIPHERTEXTBYTES/32 * 32;

  for i=off to MLKEM_INDCPA_CIPHERTEXTBYTES
  {
    t1 = ctpc.[i];
    t2 = (u8)[(64u) (ctp + i)];
    t1 ^= t2;
    t64 = (64u)t1;
    cnd |= t64;
  }

  cnd = -cnd;
  cnd >>= 63;

  return cnd;
}

/* 
__cmov: conditional move MLKEM_SYMBYTES from src to dst

requires:
  - valid(dst,0,MLKEM_SYMBYTES)
ensures:
  - touches memory only in (dst+0...dst+MLKEM_SYMBYTES)
  - _cnd = 0 => read_array(dst,0,MLKEM_SYMBYTES) = src 
  - _cnd = 1 => read_array(dst,0,MLKEM_SYMBYTES) = original value in dst
*/

inline
fn __cmov(reg ui64 dst, reg ptr u8[MLKEM_SYMBYTES] src, reg u64 cnd)
requires{is_mem_init((64u) dst,MLKEM_SYMBYTES) && is_arr_init(src,0,MLKEM_SYMBYTES)}
{
  reg u256 f g m;
  stack u64 scnd;
  reg u8 t1 t2 bcond;
  inline int i off;

  cnd = -cnd;
  scnd = cnd;

  m = #VPBROADCAST_4u64(scnd);

  for i=0 to MLKEM_SYMBYTES/32
  {
    f = src.[u256 32*i];
    g = (u256)[(64u) (dst + 32*i)];
    f = #VPBLENDVB_256(f, g, m);
    (u256)[(64u) (dst + 32*i)] = f;
  }
}
